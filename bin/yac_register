#!/bin/bash
#
##DOC:	register an identity from TIC DM (device-management) server with `create-dev-node` api

function load_variables {
	export BOARD_SERIAL_NUMBER=$(cat /tmp/ttt_system | grep "^sn" | awk '{print $2}')
	export BOARD_UNIQUE_IDENTITY=$(cat /tmp/ttt_system | grep "^id" | awk '{print $2}')
	export MACADDR_ETH=$(ifconfig | grep HWaddr | grep "^eth" | awk '{print $5}')
	export MACADDR_USB=$(ifconfig | grep HWaddr | grep "^usb" | awk '{print $5}')
	export MACADDR_WLAN=$(ifconfig | grep HWaddr | grep "^wlan" | awk '{print $5}')
	export MACADDR_BLE=$(hciconfig | grep "BD Address" | awk '{print $3}' | tr '[A-Z]' '[a-z]')
	export MACADDR_BLEMO=$(yac_hook get_macaddr blemo)
	[ "" == "${MACADDR_ETH}" ] && MACADDR_ETH="00:00:00:00:00:00"
	[ "" == "${MACADDR_USB}" ] && MACADDR_USB="00:00:00:00:00:00"
	[ "" == "${MACADDR_WLAN}" ] && MACADDR_WLAN="00:00:00:00:00:00"
	[ "" == "${MACADDR_BLE}" ] && MACADDR_BLE="00:00:00:00:00:00"
	[ "" == "${MACADDR_BLEMO}" ] && MACADDR_BLEMO="00:00:00:00:00:00"

	INFO "BOARD_PROFILE = ${BOARD_PROFILE}"
	INFO "FILE_USER = ${CLOUD_FILE_USER}"
	INFO "BOARD_SERIAL_NUMBER = ${BOARD_SERIAL_NUMBER}"
	INFO "BOARD_UNIQUE_IDENTITY = ${BOARD_UNIQUE_IDENTITY}"
	INFO "BOARD = ${BOARD}"
	INFO "BOARD_BASE_VERSION = ${BOARD_BASE_VERSION}"
	INFO "MACADDR_ETH = ${MACADDR_ETH}"
	INFO "MACADDR_USB = ${MACADDR_USB}"
	INFO "MACADDR_WLAN = ${MACADDR_WLAN}"
	INFO "MACADDR_BLE = ${MACADDR_BLE}"
	INFO "MACADDR_BLEMO = ${MACADDR_BLEMO}"
}

function generate_yac_files_and_reboot {
	local TMP=$1
	local IDENTITY=$(cat ${TMP} | jq .data.identity | sed 's/\"//g')
	local NUMBER=$(cat ${TMP} | jq .data.sequence_number | sed 's/\"//g')
	local TOKEN=$(cat ${TMP} | jq .data.token | sed 's/\"//g')
	cat ${TMP} | jq .
	rm -f ${TMP}

	INFO "identity => $(LIGHT_GREEN ${IDENTITY})"
	INFO "token => $(YELLOW ${TOKEN})"

	yac_hook store_device_id_and_token ${IDENTITY} ${TOKEN}
	local EXIT_CODE=$?

	if [ "0" != "${EXIT_CODE}" ]; then
		INFO "fallback to filesystem storage"
		local YAC_ID_FILE="/mnt/emmc/yac.id"
		local YAC_TOKEN_FILE="/mnt/emmc/yac.token"
		if [ "" == "$(mount | grep '/mnt/emmc')" ]; then
			YAC_ID_FILE="/$(basename ${YAC_ID_FILE})"
			YAC_TOKEN_FILE="/$(basename ${YAC_TOKEN_FILE})"
			INFO "detect boot from eMMC, change id and token file location to current root"
		fi
		INFO "generating ${YAC_ID_FILE} ..."
		echo ${IDENTITY} > ${YAC_ID_FILE}
		INFO "generating ${YAC_TOKEN_FILE} ..."
		echo ${TOKEN} > ${YAC_TOKEN_FILE}
	fi

	[ "true" == "${IGNORE_REBOOT}" ] && return 0
	INFO "rebooting ..."
	reboot
}

function register_production_node {
	load_variables
	[ "${BOARD_SERIAL_NUMBER}" != "${BOARD_UNIQUE_IDENTITY}" ] && [ "true" != "${FORCE}" ] && ERR "already register unique id $(LIGHT_GREEN ${BOARD_UNIQUE_IDENTITY}) (serial_number: $(YELLOW ${BOARD_SERIAL_NUMBER})), then skip registration." && exit 1
	[ "" == "${VERSION}" ] && local VERSION=${BOARD_BASE_VERSION}
	if [ "" == "${SERVER}" ]; then
		[ "" == "${PORT}" ] && local PORT=7070  # default tic-dm-proxy port number
		if [ "" == "${IP}" ]; then
			[ "" == "$(which avahi-browse)" ] && ERR "please install avahi-utils first" && exit 1
			INFO "looking for tic-dm-proxy server running at port ${PORT} in local network ..."
			local IP=$(avahi-browse -d local _http._tcp -t -r -p | grep ";${PORT};$" | awk -F';' '{print $8}' | head -n1)
			local EXIT_CODE=$?
			[ "0" != "${EXIT_CODE}" ] && ERR "failed to lookup tic-dm-proxy server, err: ${EXIT_CODE}" && exit ${EXIT_CODE}
			[ "" == "${IP}" ] && ERR "missing tic-dm-proxy server at local network" && exit 1
		fi
		local SERVER="http://${IP}:${PORT}"
	fi

	if [ "00:00:00:00:00:00" == "${MACADDR_BLEMO}" ] && [ "true" != "${IGNORE_BLEMO}" ]; then
		while true; do
			export MACADDR_BLEMO=$(yac_hook get_macaddr blemo)
			if [ "" == "${MACADDR_BLEMO}" ]; then
				INFO "waiting for BLEMO mac address ..."
				sleep 1
			else
				INFO "got blemo mac address: ${MACADDR_BLEMO}"
				break
			fi
		done
	fi

	local TMP=$(mktemp /tmp/XXXXXX)
	local URL="${SERVER}/api/v3/nodes/${BOARD_PROFILE}/update-production-node/${BOARD_SERIAL_NUMBER}"
	INFO "posting data to ${URL} ..."
	[ "" == "${AUTH}" ] || local AUTH_OPTS="-a ${AUTH}"

	http \
		--check-status \
		--ignore-stdin \
		${AUTH_OPTS} \
		${URL} \
			device==$(echo ${BOARD} | tr [a-z] [A-Z]) \
			version=${VERSION} \
			macaddr_eth=${MACADDR_ETH} \
			macaddr_usb=${MACADDR_USB} \
			macaddr_wlan=${MACADDR_WLAN} \
			macaddr_ble=${MACADDR_BLE} \
			macaddr_blemo=${MACADDR_BLEMO} \
			> ${TMP}
	local EXIT_CODE=$?
	[ "0" != "${EXIT_CODE}" ] && ERR "failed to register" && cat ${TMP} && rm -f ${TMP} && exit 1
	generate_yac_files_and_reboot ${TMP}
}


function register_dev_node {
	load_variables
	[ "${BOARD_SERIAL_NUMBER}" != "${BOARD_UNIQUE_IDENTITY}" ] && [ "true" != "${FORCE}" ] && ERR "already register unique id $(LIGHT_GREEN ${BOARD_UNIQUE_IDENTITY}) (serial_number: $(YELLOW ${BOARD_SERIAL_NUMBER})), then skip registration." && exit 1
	local SERVER=$1
	[ "" == "${SERVER}" ] && SERVER="https://tic-dm.t2t.io"

	local TMP=$(mktemp /tmp/XXXXXX)
	local USER="${BOARD_PROFILE}-$(basename ${YAC_DIR})"
	local PASS="${CLOUD_RELEASE_PASS}"
	[ "" != "${SERVER_PASS}" ] && PASS="${SERVER_PASS}"
	INFO "posting data to ${SERVER}/api/v3/nodes/${BOARD_PROFILE}/create-dev-node/${BOARD_SERIAL_NUMBER} with user ${USER}"
	INFO "http --check-status --ignore-stdin -a ${USER}:${PASS} ${SERVER}/api/v3/nodes/${BOARD_PROFILE}/create-dev-node/${BOARD_SERIAL_NUMBER} device=$(echo ${BOARD} | tr [a-z] [A-Z]) version=${BOARD_BASE_VERSION} macaddr_eth=${MACADDR_ETH} macaddr_usb=${MACADDR_USB} macaddr_wlan=${MACADDR_WLAN} macaddr_ble=${MACADDR_BLE} macaddr_blemo=${MACADDR_BLEMO}"

	http \
		--check-status \
		--ignore-stdin \
		-a ${USER}:${PASS} \
		${SERVER}/api/v3/nodes/${BOARD_PROFILE}/create-dev-node/${BOARD_SERIAL_NUMBER} \
			device=$(echo ${BOARD} | tr [a-z] [A-Z]) \
			version=${BOARD_BASE_VERSION} \
			macaddr_eth=${MACADDR_ETH} \
			macaddr_usb=${MACADDR_USB} \
			macaddr_wlan=${MACADDR_WLAN} \
			macaddr_ble=${MACADDR_BLE} \
			macaddr_blemo=${MACADDR_BLEMO} \
			> ${TMP}
	local EXIT_CODE=$?
	[ "0" != "${EXIT_CODE}" ] && ERR "failed to register" && cat ${TMP} && rm -f ${TMP} && exit 1
	generate_yac_files_and_reboot ${TMP}
}


function yac_main {
	local PROFILE_SYS_HOOK="${PROFILE_CURRENT_DIR}/etc/.yac"
	local NAME=$1
	INFO "NAME => ${NAME}"
	shift
	[ "" == "${NAME}" ] && INFO "please specify name" && exit 1
	[ -f "${PROFILE_SYS_HOOK}" ] && source ${PROFILE_SYS_HOOK} && INFO "source $(LIGHT_GREEN ${PROFILE_SYS_HOOK})"
	register_${NAME}_node $@
}
