#!/bin/bash
#
##DOC:	download latest base image, and flash to eMMC.

function check_prerequisites {
	local BOOT_PARTITION=$(mount | grep "on / type" | awk '{print $1}')
	local DISKS=($(lsblk | grep disk | grep -v boot | sort | awk '{print $1}'))

	INFO "list all partitions ..."
	blkid | awk '{printf "\t%s\n", $0}'

	for d in "${DISKS[@]}"; do
		if [ "" != "$(echo ${BOOT_PARTITION} | grep $d)" ]; then
			export BOOT_DISK=$d
		fi
		if [ "" != "$(echo $d | grep mmcblk)" ]; then
			if [ "" != "$(parted /dev/$d print | grep '^Model:' | sed 's/^Model:\ //g' | grep '^MMC')" ]; then
				export EMMC_DISK=$d
			else
				export SDXC_DISK=$d
			fi
		fi
	done
	[ "" == "${BOOT_DISK}" ] && [ "nfs" == "$(cat /proc/cmdline | tr ' ' '\n' | grep "^root" | awk -F'=' '{print $2}' | xargs basename)" ] && export BOOT_DISK="nfs"
	INFO "BOOT_DISK = $(LIGHT_GREEN ${BOOT_DISK})"
	INFO "EMMC_DISK = $(LIGHT_GREEN ${EMMC_DISK})"
	INFO "SDXC_DISK = $(LIGHT_GREEN ${SDXC_DISK})"
	[ "" == "${BOOT_DISK}" ] && ERR "missing BOOT_DISK from these disks" && lsblk | grep disk | grep -v boot | awk '{printf "\t%s\n", $1}' && return 1

	if [ "${BOOT_DIRK}" != "${EMMC_DISK}" ] && [ "${BOOT_DISK}" != "${SDXC_DISK}" ]; then
		if [ "nfs" == "${BOOT_DISK}" ]; then
			export TARGET_DISK=${EMMC_DISK}
		else
			INFO "detect current boot from USB stick: $(parted /dev/${BOOT_DISK} print | grep '^Model:' | sed 's/^Model:\ //g')"
			INFO "using emmc disk as target: ${EMMC_DISK}"
			export TARGET_DISK=${EMMC_DISK}
		fi
	else
		if [ "${BOOT_DISK}" == "${SDXC_DISK}" ]; then
			INFO "detect current boot from micro SD card: $(parted /dev/${BOOT_DISK} print | grep '^Model:' | sed 's/^Model:\ //g')"
			INFO "using emmc disk as target: ${EMMC_DISK}"
			export TARGET_DISK=${EMMC_DISK}
		else
			INFO "detect current boot from eMMC: $(parted /dev/${BOOT_DISK} print | grep '^Model:' | sed 's/^Model:\ //g')"
			INFO "restore is disallowed!!"
			return 2
		fi
	fi

	[ "" == "${BOOT_DISK}" ] && ERR "missing BOOT_DISK from these disks" && lsblk | grep disk | grep -v boot | awk '{printf "\t%s\n", $1}' && return 1
	[ "" == "${TARGET_DISK}" ] && ERR "missing TARGET_DISK from these disks" && lsblk | grep disk | grep -v boot | awk '{printf "\t%s\n", $1}' && return 1

	echo ""
	if [ "nfs" != "${BOOT_DISK}" ]; then
		local BOOT_DISK_SIZE=$(lsblk | grep "^${BOOT_DISK} " | awk '{print $4}')
		local BOOT_DISK_TYPE=$(parted /dev/${BOOT_DISK} print | grep "^Model:" | sed 's/^Model:\ //g')
		INFO "BOOT DISK: $(YELLOW ${BOOT_DISK}), size: $(LIGHT_GREEN ${BOOT_DISK_SIZE}), type: $(PURPLE ${BOOT_DISK_TYPE})"
	fi
	export TARGET_DISK_SIZE=$(lsblk | grep "^${TARGET_DISK} " | awk '{print $4}')
	export TARGET_DISK_TYPE=$(parted /dev/${TARGET_DISK} print | grep "^Model:" | sed 's/^Model:\ //g')
	INFO "TARGET DISK: $(YELLOW ${TARGET_DISK}), size: $(LIGHT_GREEN ${TARGET_DISK_SIZE}), type: $(PURPLE ${TARGET_DISK_TYPE})"

	# [ "" == "$(echo ${BOOT_DISK_TYPE} | grep '^SD')" ] && ERR "BOOT DISK is not SD card" && return 1
	# [ "" == "$(echo ${TARGET_DISK_TYPE} | grep '^MMC')" ] && ERR "TARGET DISK is not eMMC" && return 1
}


function restore {
	local SOURCE_DIR=$1
	local DRIVE=/dev/${TARGET_DISK}
	[ "" == "${MBR_SIZE}" ] && MBR_SIZE="1M"
	[ "" == "${SOURCE_DIR}" ] && ERR "please specify the source directory with file contents and bootloader image to restore ${DRIVE}" && return 1
	[ "" == "${DRIVE}" ] && ERR "please specify the target SD drive to restore, e.g. /dev/sdb" && return 1
	[ "" == "$(which pv)" ] && ERR "please install pv" && return 1
	[ "" == "$(which sfdisk)" ] && ERR "please install sfdisk" && return 1

	[ ! -b "${DRIVE}" ] && ERR "invalid target drive: ${DRIVE}" && return 2
	# [ ! -f "${SOURCE_DIR}/bootloader.img" ] && ERR "invalid source directory (${SOURCE_DIR}): missing bootloader.img" && return 2
	# [ ! -f "${SOURCE_DIR}/partitions.sfdisk.dump" ] && ERR "invalid source directory (${SOURCE_DIR}): missing partitions.sfdisk.dump" && return 2
	[ ! -d "${SOURCE_DIR}/p1" ] && ERR "invalid source directory (${SOURCE_DIR}): missing p1" && return 2
	[ ! -d "${SOURCE_DIR}/p2" ] && ERR "invalid source directory (${SOURCE_DIR}): missing p2" && return 2

	local UBOOT_MLO_FILE="/tmp/MLO"
	local UBOOT_IMG_FILE="/tmp/u-boot.img"
	if [ "true" == "${USE_ELINUX_UBOOT}" ]; then
		local UBOOT_SERVER="https://rcn-ee.com/repos/bootloader"
		local UBOOT_BOARD="am335x_boneblack"
		local UBOOT_BUILD_VERSION="v2018.01-r11"
		local UBOOT_MLO="${UBOOT_SERVER}/${UBOOT_BOARD}/MLO-${UBOOT_BOARD}-${UBOOT_BUILD_VERSION}"
		local UBOOT_IMG="${UBOOT_SERVER}/${UBOOT_BOARD}/u-boot-${UBOOT_BOARD}-${UBOOT_BUILD_VERSION}.img"
		wget -O ${UBOOT_MLO_FILE} ${UBOOT_MLO}
		[ "0" != "$?" ] && ERR "failed to download $(basename ${UBOOT_MLO_FILE}) from ${UBOOT_MLO}" && return 3
		wget -O ${UBOOT_IMG_FILE} ${UBOOT_IMG}
		[ "0" != "$?" ] && ERR "failed to download $(basename ${UBOOT_IMG_FILE}) from ${UBOOT_IMG}" && return 3
	else
		local UBOOT_MLO_FILE_SRC="${SOURCE_DIR}/p1/opt/backup/uboot/$(basename ${UBOOT_MLO_FILE})"
		local UBOOT_IMG_FILE_SRC="${SOURCE_DIR}/p1/opt/backup/uboot/$(basename ${UBOOT_IMG_FILE})"
		[ ! -f "${UBOOT_MLO_FILE_SRC}" ] && ERR "missing ${UBOOT_MLO_FILE_SRC}" && return 3
		[ ! -f "${UBOOT_IMG_FILE_SRC}" ] && ERR "missing ${UBOOT_IMG_FILE_SRC}" && return 3
		cp -v ${UBOOT_MLO_FILE_SRC} ${UBOOT_MLO_FILE}
		cp -v ${UBOOT_IMG_FILE_SRC} ${UBOOT_IMG_FILE}
	fi

	INFO "Umount all partitions for $(LIGHT_GREEN ${DRIVE})"
	mount | grep ${DRIVE} | awk '{print $1}' | xargs -I{} sh -c "umount {}"
	sync

	INFO "Wipe out the MBR, and partition table"
	RUN_CMD dd if=/dev/zero of=${DRIVE} bs=${MBR_SIZE} count=1
	RUN_CMD sync

	INFO "Copy MBR (MLO and U-Boot) to SD card: version: $(LIGHT_GREEN ${UBOOT_BUILD_VERSION})"
	RUN_CMD dd if=${UBOOT_MLO_FILE} of=${DRIVE} count=1 seek=1 conv=notrunc bs=128k
	RUN_CMD dd if=${UBOOT_IMG_FILE} of=${DRIVE} count=2 seek=1 conv=notrunc bs=384k
	RUN_CMD sync
	
	INFO "Re-partition ${DRIVE}"
	RUN_CMD parted ${DRIVE} mklabel msdos
	RUN_CMD parted ${DRIVE} mkpart primary ext4  0%  25%
	RUN_CMD parted ${DRIVE} mkpart primary ext4 26%  50%
	RUN_CMD parted ${DRIVE} mkpart primary ext4 51% 100%

	INFO "Force kernel to re-read partition table for ${DRIVE}"
	sfdisk --re-read ${DRIVE}
	lsblk -l | grep ${TARGET_DISK} | grep -v boot | awk '{printf "\t/dev/%s\n", $1}'

	local CURRENT=$(pwd)
	local PARTITIONS=($(lsblk -l | grep ${TARGET_DISK} | grep -v boot | grep -v "${TARGET_DISK} " | sort | awk '{printf "/dev/%s\n", $1}'))
	for p in "${PARTITIONS[@]}"; do
		local NAME=$(basename ${p})
		local NUM=${NAME:$((${#NAME}-1)):1}
		local DIR="/mnt/${NAME}"
		local SRC="${SOURCE_DIR}/p${NUM}"

		RUN_CMD mkfs.ext4 ${p} || return 4
		RUN_CMD mkdir -p ${DIR}
		RUN_CMD mount ${p} ${DIR} || return 4

		if [ -d "${SRC}" ]; then
			cd ${SRC}
			INFO "calculating total size of ${SRC} ..."
			local SIZE=$(du -sb . | awk '{print $1}')
			INFO "size = $(printf "%'d" ${SIZE}) bytes"
			tar cf - . | pv -s ${SIZE} | tar xf - -C ${DIR}
			cd ${CURRENT}
		else
			INFO "missing ${SRC} to restore $(LIGHT_GREEN ${p})"
		fi

		RUN_CMD umount ${p}
		RUN_CMD sync
	done
}


function download_latest_image_and_restore {
	local LOCAL_ARCHIVE=$1
	INFO "LOCAL_ARCHIVE = ${LOCAL_ARCHIVE}"
	if [ "" == "${LOCAL_ARCHIVE}" ]; then
		[ "99991231z" == "${BOARD_BASE_VERSION}" ] && ERR "current BOARD_BASE_VERSION is 99991231z, which is invalid" && exit 10
		local TMP_FILE=$(mktemp /tmp/XXXXXX)
		local URL="${CLOUD_RELEASE_URL}/projects/${BOARD_PROFILE}/nodes/${BOARD}-sd-base/"
		INFO "looking current base version ${BOARD_BASE_VERSION} from ${URL} ..."
		http -a ${CLOUD_RELEASE_USER}:${CLOUD_RELEASE_PASS} ${URL} > ${TMP_FILE}
		[ "0" != "$?" ] && ERR "failed to get file list from ${SERVER}/projects/foop/nodes/bbg-sd-base/" && rm -f ${TMP_FILE} && exit 10
		local FILENAME=$(cat ${TMP_FILE} | jq ".[] | .name" | sed 's/\"//g' | grep "${BOARD_BASE_VERSION}.tar")
		rm -f TMP_FILE
		[ "" == "${FILENAME}" ] && ERR "no such base version: ${BOARD_BASE_VERSION}" && exit 10
		INFO "Found. $(LIGHT_GREEN ${FILENAME}) from ${CLOUD_RELEASE_URL}"
		local NAME=${FILENAME%%.*}
		local ARCHIVE_FILE="/tmp/${FILENAME}"
	else
		[ ! -f "${LOCAL_ARCHIVE}" ] && ERR "no such local archive file: ${LOCAL_ARCHIVE}" && exit 10
		local FILENAME=$(basename ${LOCAL_ARCHIVE})
		local NAME=${FILENAME%%.*}
		local ARCHIVE_FILE=${LOCAL_ARCHIVE}
	fi

	if [ -f ${ARCHIVE_FILE} ]; then
		INFO "reuse the existed archive file: ${ARCHIVE_FILE} ($(YELLOW $(ls -alh ${ARCHIVE_FILE} | awk '{print $5}')))"
	else
		wget --user ${CLOUD_RELEASE_USER} --password ${CLOUD_RELEASE_PASS} -O ${ARCHIVE_FILE} ${URL}/${FILENAME}
		[ "0" != "$?" ] && ERR "failed to down ${URL}/${FILENAME}" && exit 11
	fi
	[ "sqfs" == "${ARCHIVE_FILE#*.}" ] && local USE_SQFS="true" || local USE_SQFS="false"
	local ARCHIVE_DIR="${YS_DAT_DIR}/tmp/${NAME}"

	if [ "true" == "${USE_SQFS}" ]; then
		RUN_CMD rm -rf ${ARCHIVE_DIR}
		RUN_CMD mkdir -p ${ARCHIVE_DIR}
		RUN_CMD mount ${ARCHIVE_FILE} ${ARCHIVE_DIR}
	else
		if [ "true" == "${SKIP_DECOMPRESSION_WHEN_EXIST}" ] && [ -d "${ARCHIVE_DIR}" ]; then
			INFO "skip decompression because ${ARCHIVE_DIR} exists"
		else
			rm -rf ${ARCHIVE_DIR}
			mkdir -p ${ARCHIVE_DIR}
			INFO "decompressing ${ARCHIVE_FILE} to ${ARCHIVE_DIR} ..."
			tar xf ${ARCHIVE_FILE} -C ${ARCHIVE_DIR}
			[ "0" != "$?" ] && ERR "failed to decompress ${ARCHIVE}" && exit 12
		fi
	fi

	restore ${ARCHIVE_DIR}
	INFO "done. (exit-code: $?)"

	if [ "true" == "${USE_SQFS}" ]; then
		RUN_CMD umount ${ARCHIVE_DIR}
	else
		if [ "true" == "${SKIP_DECOMPRESSION_WHEN_EXIST}" ]; then
			INFO "nothing for cleanup"
		else
			RUN_CMD rm -rf ${ARCHIVE_DIR}
		fi
	fi
}

function yac_main {
	check_prerequisites || return $?
	download_latest_image_and_restore $@
}
