#!/bin/bash
#
##DOC:	bootup yac system, including initiate wireless and generate /tmp/ttt_system

function check_prerequisites {
	check_tool_prerequisites ifconfig iwlist
}

function mount_directories {
	mkdir -p ${PROFILE_LOG_DIR}
	mkdir -p ${PROFILE_STORAGE_DIR}
	mkdir -p ${PROFILE_CURRENT_DIR}
	if [ "" == "$(mount | grep ${PROFILE_LOG_DIR})" ]; then
		mkdir -p /mnt/data/profiles/${BOARD_PROFILE}/logs
		mount -o bind /mnt/data/profiles/${BOARD_PROFILE}/logs ${PROFILE_LOG_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_LOG_DIR})"
		mkdir -p ${PROFILE_LOG_SYS_DIR}
		mkdir -p ${PROFILE_LOG_APP_DIR}
	fi

	if [ "" == "$(mount | grep ${PROFILE_STORAGE_DIR})" ]; then
		mkdir -p /mnt/data/profiles/${BOARD_PROFILE}/storage
		mount -o bind /mnt/data/profiles/${BOARD_PROFILE}/storage ${PROFILE_STORAGE_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_STORAGE_DIR})"
	fi

	if [ "" == "$(mount | grep ${PROFILE_CURRENT_DIR})" ]; then
		mount -o bind /mnt/app/profiles/${BOARD_PROFILE}/${BOARD_PROFILE_VERSION} ${PROFILE_CURRENT_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_CURRENT_DIR})"
		mkdir -p ${PROFILE_CURRENT_LOG_DIR}
	fi

	local HOOK="${PROFILE_CURRENT_DIR}/etc/.yac"
	[ -f "${HOOK}" ] && source ${HOOK} && INFO "source $(LIGHT_GREEN ${HOOK})"
}

function bootup_wireless_adapter {
	# Search the WLAN device, might be wlan0, or wlan1, ...
	#
	INFO "detecting wireless adapter ..."
	export WIRELESS_IF=$(ifconfig -a | grep wlan | awk '{print $1}')
	[ "" ==  "${WIRELESS_IF}" ] && ERR "no available wireless interface" && return
	INFO "wireless device is $(YELLOW ${WIRELESS_IF})"

	if [ "" == "$(ifconfig ${WIRELESS_IF} | grep UP)" ]; then
		INFO "bring $(YELLOW ${WIRELESS_IF}) up"
		ifconfig ${WIRELESS_IF} up
		INFO "result = $?"
	fi
}

function find_ap_and_connect {
	# Scan current environment with all available wireless access points
	#
	[ "" ==  "${WIRELESS_IF}" ] && return
	export AP_LIST=$(mktemp /tmp/XXXXXX)
	iwlist ${WIRELESS_IF} scanning | bash ${YAC_LIB_DIR}/parse_iwlist_scan | sort -u > ${AP_LIST}
	INFO "found access-points: $(BLUE $(cat ${AP_LIST} | tr '\n' ' '))"

	# Read system settings for wireless
	#
	local TMP2=$(mktemp /tmp/XXXXXX)
	local TMP3=$(mktemp /tmp/XXXXXX)
	local TMP4=$(mktemp /tmp/XXXXXX)

	[ "" == "${WIRELESS_KEYSTORES}" ] && WIRELESS_KEYSTORES="${YS_DIR}/wireless-keystores.conf"
	[ ! -f "${WIRELESS_KEYSTORES}" ] && WIRELESS_KEYSTORES="${YS_DIR}/wireless-keystores.conf"
	local PROFILE_WIRELESS_KEYSTORES="${YS_DIR}/profiles/${BOARD_PROFILE}/wireless-keystores.conf"
	if [ -f "${PROFILE_WIRELESS_KEYSTORES}" ]; then
		cat ${PROFILE_WIRELESS_KEYSTORES} | sed -e 's/^ *//' | sed -e 's/ *$//' | sed 's/#.*$//g' | grep -v "^$" | tr '\t' ':' | nl -nrz -w9 > ${TMP2}
	fi
	if [ -f "${WIRELESS_KEYSTORES}" ]; then
		cat ${WIRELESS_KEYSTORES} | sed -e 's/^ *//' | sed -e 's/ *$//' | sed 's/#.*$//g' | grep -v "^$" | tr '\t' ':' | nl -nrz -w9 >> ${TMP2}
	fi
	cat ${AP_LIST} | tr '\n' '\0' | xargs -0 -I{} sh -c "grep {} ${TMP2}" >> ${TMP3}
	sort ${TMP3} | awk -F '\t' '{print $2}' > ${TMP4}
	INFO "try access-points: $(BLUE $(cat ${TMP4} | awk -F ':' '{print $1}' | tr '\n' ' '))"

	rm -f ${TMP2}
	rm -f ${TMP3}
	rm -f ${AP_LIST}

	WIFI_LOGFILE="${PROFILE_LOG_SYS_DIR}/wireless_`date +%Y_%m%d_%H%M`.log"
	TMP5=$(mktemp)
	SETTINGS=($(cat ${TMP4}))
	export WIRELESS_CONNECTED="false"
	rm -f ${TMP4}
	source ${YAC_LIB_DIR}/wireless_connect

	# Try to connect wireless access point one-by-one
	#
	for s in "${SETTINGS[@]}" ; do
		SSID=$(echo $s | awk -F ':' '{print $1}')
		PASS=$(echo $s | awk -F ':' '{print $2}')
		INFO "connecting to $(YELLOW ${SSID}) with password $(YELLOW ${PASS})"
		WIRELESS_IF=${WIRELESS_IF} WIFI_LOGFILE=${WIFI_LOGFILE} WAITING_TIME_LOGFILE=${TMP5} connect_to_ap ${SSID} ${PASS}

		export WIRELESS_AP_MAC=$(iwconfig ${WIRELESS_IF} | grep 'Access Point' | sed 's/.*Access Point: //g')
		export WIRELESS_IP_ADDR=$(ifconfig ${WIRELESS_IF} | grep "inet addr" | awk '{print $2}' | sed 's/addr://g')
		if [ "" == "$(echo ${WIRELESS_AP_MAC} | grep ':')" ] || [ "" == "${WIRELESS_IP_ADDR}" ]; then
			sleep 1
		else
			export WIRELESS_CONNECTED="true"
			INFO "wireless-ap-mac = $(LIGHT_GREEN ${WIRELESS_AP_MAC})"
			INFO "wireless-ip = $(LIGHT_GREEN ${WIRELESS_IP_ADDR})"
			INFO "spent $(cat ${TMP5}) seconds to connect to wireless ap"
			export SSID
			export WIRELESS_CONNECTING_TIME=$(cat ${TMP5})
			rm -f ${TMP5}
			rm -f ${PROFILE_CURRENT_LOG_DIR}/wireless.log
			ln -s ${WIFI_LOGFILE} ${PROFILE_CURRENT_LOG_DIR}/wireless.log
			INFO "log: $(BLUE ${PROFILE_CURRENT_LOG_DIR}/wireless.log) -> ${WIFI_LOGFILE}"
			break
		fi
	done
}

function generate_ttt_system {
cat << __EOF__ > /tmp/ttt_system
id	${UNIQUE_ID}
alias	${BOARD_NAME}
profile	${BOARD_PROFILE}
profile_version	${BOARD_PROFILE_VERSION}
wireless_ap_mac	${WIRELESS_AP_MAC}
wireless_ip_addr	${WIRELESS_IP_ADDR}
wireless_mac_addr	${MAC_ADDR}
wireless_handshake_time	${WIRELESS_CONNECTING_TIME}
wireless_ssid	${SSID}
__EOF__
cp /tmp/ttt_system ${PROJECT_LOG_DIR}/
}


function generate_sys_info_and_notify_cloud {
	export UNIQUE_ID="$(find_unique_id)"
	export BOARD_NAME="$(uname -n)"
	export MAC_ADDR=$(ifconfig ${WIRELESS_IF} | grep HWaddr | grep ${WIRELESS_IF} | sed 's/.*HWaddr //g')dd

	if [ "true" == "${WIRELESS_CONNECTED}" ]; then
		export MAC_ADDR=$(ifconfig ${WIRELESS_IF} | grep HWaddr | grep ${WIRELESS_IF} | sed 's/.*HWaddr //g')
		RUN_CMD_STREAMING \
			http \
				--verbose \
				--ignore-stdin \
				https://ws.dhvac.io/api/models/${BOARD_NAME}.system \
				profile=${BOARD_PROFILE} \
				profile_version=${BOARD_PROFILE_VERSION} \
				wireless_ap_mac=${WIRELESS_AP_MAC} \
				wireless_ip_addr=${WIRELESS_IP_ADDR} \
				wireless_mac_addr=${MAC_ADDR} \
				wireless_handshake_time:=${WIRELESS_CONNECTING_TIME} \
				wireless_ssid=${SSID} \
				id=${UNIQUE_ID}
		INFO "successfully https://ws.dhvac.io/api/models/${BOARD_NAME}.system"
		generate_ttt_system
	else
		ERR "failed to connect to any access-point"
		generate_ttt_system
	fi
}

function run_init_scripts {
	SCRIPTS=($(find ${PROFILE_CURRENT_DIR}/etc/init.d/ -type f | sort))
	for s in "${SCRIPTS[@]}"; do
		INFO "executing $(LIGHT_GREEN ${BOARD_PROFILE}) / $(BLUE ${BOARD_PROFILE_VERSION}) / $(PURPLE $(basename $s)) ..."
		notify_event "init" "$s" "begin"
		PROFILE_CURRENT_DIR=${PROFILE_CURRENT_DIR} \
			PROFILE_LOG_DIR=${PROFILE_LOG_DIR} \
			$s
		notify_event "init" "$s" "end"
	done
}

function notify_event {
	call_func "yac_hook" "boot" $@
}

function yac_main {
	source ${YAC_DIR}/externals/bash-utils/system
	INFO "check_prerequisites"
	check_prerequisites
	INFO "mount_directories"
	mount_directories
	notify_event "begin"
	INFO "bootup_wireless_adapter"
	notify_event "bootup_wireless_adapter"
	bootup_wireless_adapter
	INFO "find_ap_and_connect"
	notify_event "find_ap_and_connect"
	find_ap_and_connect
	notify_event "wireless" "${WIRELESS_CONNECTED}"
	INFO "generate_sys_info_and_notify_cloud"
	notify_event "generate_sys_info_and_notify_cloud"
	generate_sys_info_and_notify_cloud
	INFO "run_init_scripts"
	run_init_scripts
	notify_event "end"
	INFO "yac_boot.end()"
}

