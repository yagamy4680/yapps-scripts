#!/bin/bash
#
##DOC:	bootup yac system, including initiate wireless and generate /tmp/ttt_system

function check_prerequisites {
	check_tool_prerequisites ifconfig iwlist
}

function mount_directories {
	mkdir -p ${PROFILE_LOG_DIR}
	mkdir -p ${PROFILE_STORAGE_DIR}
	mkdir -p ${PROFILE_CURRENT_DIR}
	if [ "" == "$(mount | grep ${PROFILE_LOG_DIR})" ]; then
		mkdir -p /mnt/data/profiles/${BOARD_PROFILE}/logs
		mount -o bind /mnt/data/profiles/${BOARD_PROFILE}/logs ${PROFILE_LOG_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_LOG_DIR})"
		mkdir -p ${PROFILE_LOG_SYS_DIR}
		mkdir -p ${PROFILE_LOG_APP_DIR}
	fi

	if [ "" == "$(mount | grep ${PROFILE_STORAGE_DIR})" ]; then
		mkdir -p /mnt/data/profiles/${BOARD_PROFILE}/storage
		mount -o bind /mnt/data/profiles/${BOARD_PROFILE}/storage ${PROFILE_STORAGE_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_STORAGE_DIR})"
	fi

	if [ "" == "$(mount | grep ${PROFILE_CURRENT_DIR})" ]; then
		mount -o bind /mnt/app/profiles/${BOARD_PROFILE}/${BOARD_PROFILE_VERSION} ${PROFILE_CURRENT_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_CURRENT_DIR})"
		mkdir -p ${PROFILE_CURRENT_LOG_DIR}
	fi

	local HOOK="${PROFILE_CURRENT_DIR}/etc/.yac"
	[ -f "${HOOK}" ] && source ${HOOK} && INFO "source $(LIGHT_GREEN ${HOOK})"
}

function output {
	echo $@
}

function check_connectivity {
	[ "" == "${WIRELESS_IF}" ] && local WIRELESS_IF=$1
	[ "" == "${WIRELESS_IF}" ] && output "91" && return

	# Check the connectivity of data-link layer in OSI (to wireless access-point).
	#
	local AP_MAC=$(iwconfig ${WIRELESS_IF} | head -n2 | tail -n1 | tr ' ' '\n' | grep -v '^$' | tail -n1)
	[ "Not-Associated" == "${AP_MAC}" ] && output "92" && return
	[ "" == "${AP_MAC}" ] && output "93" && return

	# Check the LAN connectivity of network/ip layer in OSI (ping to default gateway).
	#
	local GATEWAY=$(route -n | grep " UG " | awk '{print $2}')
	[ "" == "${GATEWAY}" ] && output "94" && return
	ping -c 1 ${GATEWAY} > /dev/null 2>&1
	[ "0" != "$?" ] && output "95" && return

	# Check the WAN connectivity of network/ip layer in OSI (ping to 8.8.8.8).
	#
	ping -c 1 -W 5 8.8.8.8 > /dev/null 2>&1
	[ "0" != "$?" ] && output "96" && return

	# Check the health of transport layer in OSI (dns lookup)
	#
	echo -e 'server 8.8.8.8\nset timeout=2\nwww.google.com' | nslookup > /dev/null 2>&1
	[ "0" != "$?" ] && output "97" && return

	output "99"
}

function bootup_wireless_adapter {
	# Search the WLAN device, might be wlan0, or wlan1, ...
	#
	INFO "detecting wireless adapter ..."
	export WIRELESS_IF=$(ifconfig -a | grep wlan | awk '{print $1}')
	[ "" ==  "${WIRELESS_IF}" ] && ERR "no available wireless interface" && return
	INFO "wireless device is $(YELLOW ${WIRELESS_IF})"

	if [ "" == "$(ifconfig ${WIRELESS_IF} | grep UP)" ]; then
		INFO "bring $(YELLOW ${WIRELESS_IF}) up"
		ifconfig ${WIRELESS_IF} up
		INFO "result = $?"
	fi
}

function find_ap_and_connect {
	# Scan current environment with all available wireless access points
	#
	[ "" ==  "${WIRELESS_IF}" ] && return
	export AP_LIST=$(mktemp /tmp/XXXXXX)
	iwlist ${WIRELESS_IF} scanning | bash ${YAC_LIB_DIR}/parse_iwlist_scan | sort -u > ${AP_LIST}
	INFO "found access-points: $(BLUE $(cat ${AP_LIST} | tr '\n' ' '))"

	# Read system settings for wireless
	#
	local TMP2=$(mktemp /tmp/XXXXXX)
	local TMP3=$(mktemp /tmp/XXXXXX)
	local TMP4=$(mktemp /tmp/XXXXXX)

	[ "" == "${WIRELESS_KEYSTORES}" ] && WIRELESS_KEYSTORES="${YS_DIR}/wireless-keystores.conf"
	[ ! -f "${WIRELESS_KEYSTORES}" ] && WIRELESS_KEYSTORES="${YS_DIR}/wireless-keystores.conf"
	local PROFILE_WIRELESS_KEYSTORES="${YS_DIR}/profiles/${BOARD_PROFILE}/wireless-keystores.conf"
	if [ -f "${PROFILE_WIRELESS_KEYSTORES}" ]; then
		cat ${PROFILE_WIRELESS_KEYSTORES} | sed -e 's/^ *//' | sed -e 's/ *$//' | sed 's/#.*$//g' | grep -v "^$" | nl -nrz -w9 > ${TMP2}
	fi
	if [ -f "${WIRELESS_KEYSTORES}" ]; then
		cat ${WIRELESS_KEYSTORES} | sed -e 's/^ *//' | sed -e 's/ *$//' | sed 's/#.*$//g' | grep -v "^$" | nl -nrz -w9 >> ${TMP2}
	fi
	cat ${AP_LIST} | tr '\n' '\0' | xargs -0 -I{} sh -c "grep -P \"^.........\t{}\t\" ${TMP2}" >> ${TMP3}
	sort ${TMP3} | awk -F '\t' '{printf "%s\t%s\n", $2, $3}' > ${TMP4}
	INFO "try access-points: $(BLUE $(cat ${TMP4} | awk -F '\t' '{print $1}' | tr '\n' ' '))"

	rm -f ${TMP2}
	rm -f ${TMP3}
	rm -f ${AP_LIST}

	WIFI_LOGFILE="${PROFILE_LOG_SYS_DIR}/wireless_`date +%Y_%m%d_%H%M`.log"
	TMP5=$(mktemp)
	IFS=$' \n'
	SETTINGS=($(cat ${TMP4}))
	unset IFS
	export WIRELESS_CONNECTED="false"
	export WIRELESS_CONNECTIVITY="0"
	rm -f ${TMP4}
	source ${YAC_LIB_DIR}/wireless_connect

	# Try to connect wireless access point one-by-one
	#
	for s in "${SETTINGS[@]}" ; do
		SSID=$(echo $s | awk '{print $1}')
		PASS=$(echo $s | awk '{print $2}')
		INFO "connecting to $(YELLOW ${SSID}) with password $(YELLOW ${PASS})"
		notify_event "find_ap_and_connect" ${WIRELESS_IF} ${SSID} ${PASS}
		WIRELESS_IF=${WIRELESS_IF} WIFI_LOGFILE=${WIFI_LOGFILE} WAITING_TIME_LOGFILE=${TMP5} connect_to_ap ${SSID} ${PASS}
		INFO "connect_to_ap returns $?"

		export WIRELESS_AP_MAC=$(iwconfig ${WIRELESS_IF} | grep 'Access Point' | sed 's/.*Access Point: //g')
		export WIRELESS_IP_ADDR=$(ifconfig ${WIRELESS_IF} | grep "inet addr" | awk '{print $2}' | sed 's/addr://g')
		if [ "" == "$(echo ${WIRELESS_AP_MAC} | grep ':')" ] || [ "" == "${WIRELESS_IP_ADDR}" ]; then
			sleep 1
		else
			export WIRELESS_CONNECTED="true"
			INFO "wireless-ap-mac = $(LIGHT_GREEN ${WIRELESS_AP_MAC})"
			INFO "wireless-ip = $(LIGHT_GREEN ${WIRELESS_IP_ADDR})"
			INFO "spent $(cat ${TMP5}) seconds to connect to wireless ap"
			export SSID
			export WIRELESS_CONNECTING_TIME=$(cat ${TMP5})
			rm -f ${TMP5}
			rm -f ${PROFILE_CURRENT_LOG_DIR}/wireless.log
			ln -s ${WIFI_LOGFILE} ${PROFILE_CURRENT_LOG_DIR}/wireless.log
			INFO "log: $(BLUE ${PROFILE_CURRENT_LOG_DIR}/wireless.log) -> ${WIFI_LOGFILE}"
			export WIRELESS_CONNECTIVITY=$(check_connectivity)
			INFO "wireless-connectivity = ${WIRELESS_CONNECTIVITY}"
			break
		fi
	done
}

function generate_ttt_system {
cat << __EOF__ > /tmp/ttt_system
id	${BOARD_UNIQUE_ID}
sn	${BOARD_SERIAL_NUMBER}
alias	${BOARD_NAME}
base_version	${BOARD_BASE_VERSION}
profile	${BOARD_PROFILE}
profile_version	${BOARD_PROFILE_VERSION}
profile_env	${BOARD_PROFILE_ENV}
wireless_ap_mac	${WIRELESS_AP_MAC}
wireless_ip_addr	${WIRELESS_IP_ADDR}
wireless_mac_addr	${MAC_ADDR}
wireless_handshake_time	${WIRELESS_CONNECTING_TIME}
wireless_ssid	${SSID}
__EOF__
}

# Generate 2 variables, and export them:
#    - BOARD_SERIAL_NUMBER    (e.g. `bbg-BBG115081198`)
#    - BOARD_UNIQUE_ID        (e.g. `F99900011`)
#
function generate_id {
	local BEAGLEBONE_ID=$(read_bbb_id)
	local RPI_ID=$(read_rpi2_id)
	local YAC_BSN_FILE="yac.bsn"
	local YAC_ID_FILE="yac.id"

	if [ "" != ${BEAGLEBONE_ID} ]; then
		# It's BeagleBone-Black series: BBB/BBG/BBG-Wirelss/IPCS
		#
		export BOARD_SERIAL_NUMBER=${BEAGLEBONE_ID}
		export BOARD_UNIQUE_ID=${BEAGLEBONE_ID}
		local EMMC_PARTITION="/dev/mmcblk1p2"
		local EMMC_DIRECTORY="/mnt/emmc"

		if [ -b "${EMMC_PARTITION}" ]; then
			# Booting from SD card. (so both /dev/mmcblk0 and /dev/mmcblk1 exist)
			# 
			mkdir -p ${EMMC_DIRECTORY} 2>&1 > /dev/null
			mount -t ext4 ${EMMC_PARTITION} ${EMMC_DIRECTORY} 2>&1 > /dev/null
			[ -f "${EMMC_DIRECTORY}/${YAC_BSN_FILE}" ] && BOARD_SERIAL_NUMBER=$(cat "${EMMC_DIRECTORY}/${YAC_BSN_FILE}")
			[ -f "${EMMC_DIRECTORY}/${YAC_ID_FILE}" ]  && BOARD_UNIQUE_ID=$(cat "${EMMC_DIRECTORY}/${YAC_ID_FILE}")
		else
			# Booting from eMMC (so only /dev/mmcblk0 exists)
			# 
			[ -f "/${YAC_ID_FILE}" ] && BOARD_UNIQUE_ID=$(cat "/${YAC_ID_FILE}")
		fi
	elif [ "" != ${RPI_ID} ]; then
		# It's RPi2/3, boots from SD card
		#
		export BOARD_SERIAL_NUMBER=${RPI_ID}
		export BOARD_UNIQUE_ID=${RPI_ID}
		[ -f "/${YAC_ID_FILE}" ] && BOARD_UNIQUE_ID=$(cat "/${YAC_ID_FILE}")
	else
		export BOARD_SERIAL_NUMBER=$(generate_unique_id "devboard")
		export BOARD_UNIQUE_ID=${BOARD_SERIAL_NUMBER}
	fi

	[ "" == "${BOARD_UNIQUE_ID}" ] && BOARD_UNIQUE_ID="yac-$(ifconfig eth0 | head -n1 | awk '{print $5}' | tr '[:upper:]' '[:lower:]' | sed 's/\://g')"
	[ "" == "${BOARD_SERIAL_NUMBER}" ] && BOARD_SERIAL_NUMBER=${BOARD_UNIQUE_ID}
}

function update_system_id {
	generate_id
	INFO "METADATA: kernel                = $(YELLOW $(uname -r))"
	INFO "METADATA: distribution          = $(YELLOW $(lsb_release -a 2>/dev/null | grep "Description" | awk -F':' '{print $2}' | sed 's/\t//g'))"
	INFO "METADATA: BOARD_UNIQUE_ID       = $(YELLOW ${BOARD_UNIQUE_ID})"
	INFO "METADATA: BOARD_SERIAL_NUMBER   = $(YELLOW ${BOARD_SERIAL_NUMBER})"
	INFO "METADATA: BOARD_BASE_VERSION    = $(YELLOW ${BOARD_BASE_VERSION})"
	INFO "METADATA: BOARD_PROFILE         = $(YELLOW ${BOARD_PROFILE})"
	INFO "METADATA: BOARD_PROFILE_VERSION = $(YELLOW ${BOARD_PROFILE_VERSION})"
	hostname ${BOARD_UNIQUE_ID}
	sed -i "s/^127\.0\.1\.1.*/127\.0\.1\.1\t$(hostname)\ $(hostname).localdomain/g" /etc/hosts
}

function notify_cloud {
	local TMP=$(mktemp /tmp/XXXXXX)
	jo -p ttt=$(jo $(cat /tmp/ttt_system | tr '\t' '=' | tr '\n' ' ')) > ${TMP}
	cat ${TMP}
	RUN_CMD_STREAMING \
		http \
			--verbose \
			--ignore-stdin \
			https://registry.t2t.io/api/v1/update-node/${BOARD_PROFILE}/${BOARD_UNIQUE_ID} \
			metadata:=@${TMP}
	INFO "successfully https://registry.t2t.io/api/v1/update-node/${BOARD_PROFILE}/${BOARD_UNIQUE_ID}"
	rm -f ${TMP}
}

function generate_sys_info_and_notify_cloud {
	export BOARD_NAME="$(uname -n)"
	export MAC_ADDR=$(ifconfig ${WIRELESS_IF} | grep HWaddr | grep ${WIRELESS_IF} | sed 's/.*HWaddr //g')

	generate_ttt_system

	if [ "true" == "${WIRELESS_CONNECTED}" ]; then
		if [ "99" == "${WIRELESS_CONNECTIVITY}" ]; then
			notify_cloud &
		else
			ERR "connect to access-point but not connect to Internet"
		fi
	else
		ERR "failed to connect to any access-point"
	fi
}

function run_init_scripts {
	SCRIPTS=($(find ${PROFILE_CURRENT_DIR}/etc/init.d/ -type f | sort))
	for s in "${SCRIPTS[@]}"; do
		INFO "executing $(LIGHT_GREEN ${BOARD_PROFILE}) / $(BLUE ${BOARD_PROFILE_VERSION}) / $(PURPLE $(basename $s)) ..."
		notify_event "init" "$s" "begin"
		PROFILE_CURRENT_DIR=${PROFILE_CURRENT_DIR} \
			PROFILE_LOG_DIR=${PROFILE_LOG_DIR} \
			IGNORE_NODE_MODUEL_CHECKING=true \
			$s
		notify_event "init" "$s" "end"
	done
}

function notify_event {
	call_func "yac_hook" "boot" $@
}

function yac_main {
	source ${YAC_DIR}/externals/bash-utils/system
	INFO "check_prerequisites"
	check_prerequisites
	INFO "mount_directories"
	mount_directories
	notify_event "begin"
	INFO "update_system_id"
	update_system_id
	notify_event "update_system_id" ${BOARD_UNIQUE_ID}
	INFO "bootup_wireless_adapter"
	notify_event "bootup_wireless_adapter"
	bootup_wireless_adapter
	find_ap_and_connect

	notify_event "wireless" "${WIRELESS_CONNECTED}" "${WIRELESS_CONNECTIVITY}"
	#
	# Make sure the wireless disconnection emoji animation are all played.
	#
	[ "true" != "${WIRELESS_CONNECTED}" ] && sleep 4 || {
		[ "99" != "${WIRELESS_CONNECTIVITY}" ] && sleep 4
	}

	INFO "generate_sys_info_and_notify_cloud"
	notify_event "generate_sys_info_and_notify_cloud"
	generate_sys_info_and_notify_cloud

	INFO "run_init_scripts"
	run_init_scripts
	notify_event "end"
	INFO "yac_boot.end()"
}

