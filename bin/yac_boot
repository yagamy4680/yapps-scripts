#!/bin/bash
#
##DOC:	bootup yac system, including initiate wireless and generate /tmp/ttt_system

function mount_directories {
	mkdir -p ${PROFILE_LOG_DIR}
	mkdir -p ${PROFILE_STORAGE_DIR}
	mkdir -p ${PROFILE_CURRENT_DIR}
	if [ "" == "$(mount | grep ${PROFILE_LOG_DIR})" ]; then
		mkdir -p ${PROFILE_MNT_DAT_DIR}/logs
		mount -o bind ${PROFILE_MNT_DAT_DIR}/logs ${PROFILE_LOG_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_LOG_DIR})"
		mkdir -p ${PROFILE_LOG_SYS_DIR}
		mkdir -p ${PROFILE_LOG_APP_DIR}
	fi

	if [ "" == "$(mount | grep ${PROFILE_STORAGE_DIR})" ]; then
		mkdir -p ${PROFILE_MNT_DAT_DIR}/storage
		mount -o bind ${PROFILE_MNT_DAT_DIR}/storage ${PROFILE_STORAGE_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_STORAGE_DIR})"
	fi

	if [ "" == "$(mount | grep ${PROFILE_CURRENT_DIR})" ]; then
		mount -o bind ${PROFILE_MNT_APP_DIR}/${BOARD_PROFILE_VERSION} ${PROFILE_CURRENT_DIR}
		INFO "mount $(LIGHT_GREEN ${PROFILE_CURRENT_DIR})"
		mkdir -p ${PROFILE_CURRENT_LOG_DIR}
	fi
}

function output {
	echo $@
}

function generate_ttt_system {
cat << __EOF__
id	${BOARD_UNIQUE_ID}
sn	${BOARD_SERIAL_NUMBER}
token	${BOARD_TOKEN}
alias	${BOARD_ALIAS}
base_version	${BOARD_BASE_VERSION}
profile	${BOARD_PROFILE}
profile_version	${BOARD_PROFILE_VERSION}
profile_env	${BOARD_PROFILE_ENV}
profile_boots	${BOARD_PROFILE_BOOTS}
board	${BOARD}
$(call_board_hook gen_ttt_system_for_board)
$(call_profile_hook gen_ttt_system_for_profile)
__EOF__
}

function generate_ntp_script {
[ "" == "$1" ] && return
[ "" == "$2" ] && return
cat << __EOF__ > $2
#!/bin/bash
ntpdate -b $1
echo "\$?" > ${BOOT_NTP_SYNC}
date > /tmp/boot_ntp_date.txt
__EOF__
chmod +x $2
}

function generate_logrotate_conf {
cat <<__EOF__ > $1
/${BOARD_PROFILE}/logs/app/*.log {
  daily
  dateext
  missingok
  rotate 30
  compress
  notifempty
  sharedscripts
}

/${BOARD_PROFILE}/logs/system/*.log {
  daily
  dateext
  missingok
  rotate 30
  compress
  notifempty
  sharedscripts
}
__EOF__
}

# Generate 3 variables, and export them:
#    - BOARD_SERIAL_NUMBER    (e.g. `bbg-BBG115081198`)
#    - BOARD_UNIQUE_ID        (e.g. `F99900011`)
#    - BOARD_TOKEN            (e.g. `7MQNU2CJLFR`) 
#
function generate_id {
	local BEAGLEBONE_ID=$(read_bbb_id)
	local RPI_ID=$(read_rpi2_id)
	local YAC_BSN_FILE="/yac.bsn"
	local YAC_ID_FILE="/yac.id"
	local YAC_TOKEN_FILE="/yac.token"

	if [ "" != ${BEAGLEBONE_ID} ]; then
		# It's BeagleBone-Black series: BBB/BBG/BBG-Wirelss/IPCS
		#
		export BOARD_SERIAL_NUMBER=${BEAGLEBONE_ID}
		export BOARD_UNIQUE_ID=${BEAGLEBONE_ID}
		export BOARD_TOKEN="000000000000"

		[ "" == "$(echo ${BOARD_SERIAL_NUMBER} | grep "^bb.-")" ] || BOARD_SERIAL_NUMBER=$(echo ${BOARD_SERIAL_NUMBER} | sed 's/^bb.\-//g')

		# Read device id and token with hook script if possible.
		#
		local ID=$(yac_hook load_device_id ${BOARD_SERIAL_NUMBER})
		local EXIT1=$?
		local TOKEN=$(yac_hook load_device_token ${BOARD_TOKEN})
		local EXIT2=$?
		if [ "" != "${ID}" ] && [ "" != "${TOKEN}" ] && [ "0" == "${EXIT1}" ] && [ "0" == "${EXIT2}" ]; then
			export BOARD_UNIQUE_ID=${ID}
			export BOARD_TOKEN=${TOKEN}
			return 0
		fi

		local EMMC_PARTITION1="/dev/mmcblk1p1"
		local EMMC_PARTITION2="/dev/mmcblk1p2"
		local EMMC_PARTITION3="/dev/mmcblk1p3"
		local EMMC_ROOT_PARTITION=""
		local EMMC_DIRECTORY="/mnt/emmc"

		if [ -b "${EMMC_PARTITION3}" ]; then
			local TYPE1=$(blkid | grep ${EMMC_PARTITION1} | tr ' ' '\n' | grep "^TYPE" | sed 's/^TYPE=//g' | sed 's/"//g')
			local TYPE2=$(blkid | grep ${EMMC_PARTITION2} | tr ' ' '\n' | grep "^TYPE" | sed 's/^TYPE=//g' | sed 's/"//g')
			local TYPE3=$(blkid | grep ${EMMC_PARTITION3} | tr ' ' '\n' | grep "^TYPE" | sed 's/^TYPE=//g' | sed 's/"//g')
			if [ "ext4" == "${TYPE1}" ] && [ "ext4" == "${TYPE2}" ] && [ "ext4" == "${TYPE3}" ]; then
				# Booting from SD card, and BBB/BBG eMMC uses TOE image with
				# 3 partitions
				#	- /dev/mmcblk1p1 (ext4 for rootfs)
				#	- /dev/mmcblk1p2 (ext4 for profile/applications)
				#	- /dev/mmcblk1p3 (ext4 for data)
				EMMC_ROOT_PARTITION=${EMMC_PARTITION1}
				INFO "AM335X boots from eMMC with TOE partitions"
			else
				INFO "3 partitions but unexpected: ${TYPE1}/${TYPE2}/${TYPE3}"
			fi
		elif [ -b "${EMMC_PARTITION2}" ]; then
			# Booting from SD card, and BBB/BBG eMMC uses kernel 3.8 with
			# 2 partitions:
			# 	- /dev/mmcblk1p1 (fat32 with boot-loader and MLB)
			# 	- /dev/mmcblk1p2 (ext4 for rootfs)
			#
			EMMC_ROOT_PARTITION=${EMMC_PARTITION2}
			INFO "BeagleBone boots from SD (eMMC has TWO partition)"
		elif [ -b "${EMMC_PARTITION1}" ]; then
			# Booting from SD card, and BBG eMMC uses kernel 4.4.9 with 1 partition:
			# 	- /dev/mmcblk1p1 (ext4 for rootfs, MLB is stored in MBR sector)
			#
			EMMC_ROOT_PARTITION=${EMMC_PARTITION1}
			INFO "BeagleBone boots from SD (eMMC has ONE partition)"
		else
			# Booting from eMMC (so there is no /dev/mmcblk1)
			#
			INFO "BeagleBone boots from eMMC"
		fi
		if [ "" != "${EMMC_ROOT_PARTITION}" ]; then
			# Booting from SD card
			#
			mkdir -p ${EMMC_DIRECTORY} 2>&1 > /dev/null
			mount -t ext4 ${EMMC_ROOT_PARTITION} ${EMMC_DIRECTORY} 2>&1 > /dev/null
			[ -f "${EMMC_DIRECTORY}${YAC_BSN_FILE}" ] && BOARD_SERIAL_NUMBER=$(cat "${EMMC_DIRECTORY}${YAC_BSN_FILE}")
			[ -f "${EMMC_DIRECTORY}${YAC_ID_FILE}" ]  && BOARD_UNIQUE_ID=$(cat "${EMMC_DIRECTORY}${YAC_ID_FILE}")
			[ -f "${EMMC_DIRECTORY}${YAC_TOKEN_FILE}" ]  && BOARD_TOKEN=$(cat "${EMMC_DIRECTORY}${YAC_TOKEN_FILE}")
			[ -f "${EMMC_DIRECTORY}/boot/uEnv.txt" ] && INFO "eMMC kernel: $(YELLOW $(cat ${EMMC_DIRECTORY}/boot/uEnv.txt  | grep "^uname_r" | awk -F'=' '{print $2}'))"
		else
			# Booting from eMMC
			#
			[ -f "${YAC_ID_FILE}" ] && BOARD_UNIQUE_ID=$(cat "${YAC_ID_FILE}")
			[ -f "${YAC_TOKEN_FILE}" ] && BOARD_TOKEN=$(cat "${YAC_TOKEN_FILE}")
		fi
	elif [ "" != ${RPI_ID} ]; then
		# It's RPi2/3, boots from SD card
		#
		export BOARD_SERIAL_NUMBER=${RPI_ID}
		export BOARD_UNIQUE_ID=${RPI_ID}
		[ -f "${YAC_ID_FILE}" ] && BOARD_UNIQUE_ID=$(cat "${YAC_ID_FILE}")
	else
		export BOARD_SERIAL_NUMBER=$(generate_unique_id "devboard")
		export BOARD_UNIQUE_ID=${BOARD_SERIAL_NUMBER}
	fi

	[ "" == "${BOARD_UNIQUE_ID}" ] && BOARD_UNIQUE_ID="yac-$(ifconfig eth0 | head -n1 | awk '{print $5}' | tr '[:upper:]' '[:lower:]' | sed 's/\://g')"
	[ "" == "${BOARD_SERIAL_NUMBER}" ] && BOARD_SERIAL_NUMBER=${BOARD_UNIQUE_ID}
}

function update_system_id {
	generate_id
	INFO "METADATA: kernel                = $(YELLOW $(uname -r))"
	INFO "METADATA: distribution          = $(YELLOW $(lsb_release -a 2>/dev/null | grep "Description" | awk -F':' '{print $2}' | sed 's/\t//g'))"
	INFO "METADATA: BOARD_UNIQUE_ID       = $(YELLOW ${BOARD_UNIQUE_ID})"
	INFO "METADATA: BOARD_SERIAL_NUMBER   = $(YELLOW ${BOARD_SERIAL_NUMBER})"
	INFO "METADATA: BOARD_BASE_VERSION    = $(YELLOW ${BOARD_BASE_VERSION})"
	INFO "METADATA: BOARD_PROFILE         = $(YELLOW ${BOARD_PROFILE})"
	INFO "METADATA: BOARD_PROFILE_VERSION = $(YELLOW ${BOARD_PROFILE_VERSION})"
	hostname ${BOARD_UNIQUE_ID}
	echo -n ${BOARD_UNIQUE_ID} > /etc/hostname
	sed -i "s/^127\.0\.1\.1.*/127\.0\.1\.1\t$(hostname)\ $(hostname).localdomain/g" /etc/hosts
}

function notify_cloud {
	local TMP=$(mktemp /tmp/XXXXXX)
	jo -p ttt=$(jo $(cat /tmp/ttt_system | tr '\t' '=' | tr '\n' ' ')) > ${TMP}
	cat ${TMP}
	RUN_CMD_STREAMING \
		http \
			--verbose \
			--ignore-stdin \
			https://registry.t2t.io/api/v1/update-node/${BOARD_PROFILE}/${BOARD_UNIQUE_ID} \
			metadata:=@${TMP}
	INFO "successfully https://registry.t2t.io/api/v1/update-node/${BOARD_PROFILE}/${BOARD_UNIQUE_ID}"
	rm -f ${TMP}
}

function generate_system_info {
	export BOARD_ALIAS="$(uname -n)"
	generate_ttt_system | grep -v "^$" > /tmp/ttt_system
	INFO "/tmp/ttt_system"
	cat /tmp/ttt_system | awk '{printf "\t%s\n", $0}'

	INFO "/etc/logrotate.d/yapps"
	generate_logrotate_conf "/etc/logrotate.d/yapps"
	cat /etc/logrotate.d/yapps | awk '{printf "\t%s\n", $0}'
}

function send_system_info_to_cloud {
	if [ "true" == "${WIRELESS_CONNECTED}" ]; then
		if [ "99" == "${WIRELESS_CONNECTIVITY}" ]; then
			notify_cloud &
		else
			ERR "connect to access-point but not connect to Internet"
		fi
	else
		ERR "failed to connect to any access-point"
	fi
}

function run_timestamp_daemon {
	local TIMESTAMP_LOGGING="${YAC_LIB_DIR}/timestamp_logging.py"
	local TIMESTAMP_DIR="${YS_DIR}/share/timestamp"
	local TIMESTAMP_LOG="${PROFILE_LOG_SYS_DIR}/timestamp_daemon.log"
	local TIMESTAMP_BOOT_RECORDFILE="/tmp/timestamp_daemon.txt"
	local RESULT=""
	mkdir -p ${TIMESTAMP_DIR}

	# Cleanup old timestamp logging directory.
	# 
	local TMP=$(mktemp /tmp/XXXXXX)
	find ${TIMESTAMP_DIR} -maxdepth 1 -mindepth 1 -type d | sort > ${TMP}
	if [ "$(cat ${TMP} | wc -l)" -gt "6" ]; then
		local DIR=$(cat ${TMP} | head -n1)
		[ "" != "${DIR}" ] && [ "/" != "${DIR}" ] && INFO "cleanup old timestamp logging directory: $(LIGHT_GREEN ${DIR})" && rm -rf ${DIR}
	fi
	rm -f ${TMP}
	rm -f ${TIMESTAMP_BOOT_RECORDFILE}

	# Startup the timestamp logging daemon, which periodically writes UTC
	# timestamp (in seconds) into disk.
	# 
	# Another important mission for timestamp daemon is to keep the number
	# of booting times for the TOE node.
	#
	INFO "starting timestamp logging daemon"
	nohup ${TIMESTAMP_LOGGING} -v -i 300 -d ${TIMESTAMP_DIR} daemon -r ${TIMESTAMP_BOOT_RECORDFILE} >> ${TIMESTAMP_LOG} 2>&1&

	while true; do
		sleep 1
		[ -f "${TIMESTAMP_BOOT_RECORDFILE}" ] && break
		INFO "waiting timestamp daemon ready ..."
	done

	export BOARD_PROFILE_BOOTS=$(cat ${TIMESTAMP_BOOT_RECORDFILE} | awk -F'\t' '{print $2}')
}


function synchronize_time {
	[ "emmc" == "${YAPPS_SYS_RESTORE_SYSTEM_TIME_WITH_SOURCE}" ] && return

	if [ "ntp" == "${YAPPS_SYS_RESTORE_SYSTEM_TIME_WITH_SOURCE}" ]; then
		local SERVER=$(call_func "yac_hook" "get_ntp_server")
		[ "" == "${SERVER}" ] && SERVER="ntp.ubuntu.com"
		INFO "using $(LIGHT_GREEN ${SERVER}) for time synchronization"
		ping -c 1 -W 5 8.8.8.8 > /dev/null 2>&1
		if [ "0" == "$?" ]; then
			generate_ntp_script ${SERVER} /tmp/ntp && /tmp/ntp
		else
			if [ "true" == "${WIRELESS_CONNECTED}" ]; then
				if [ "99" == "${WIRELESS_CONNECTIVITY}" ]; then
					generate_ntp_script ${SERVER} /tmp/ntp && /tmp/ntp
				else
					INFO "but connectivity (${WIRELESS_CONNECTIVITY}) is lower than 99, ignore NTP time synchronization"
					echo "-4" > ${BOOT_NTP_SYNC}
				fi
			else
				INFO "but wireless disconnected, ignore NTP time synchronization"
				echo "-5" > ${BOOT_NTP_SYNC}
			fi
		fi
	elif [ "rtc" == "${YAPPS_SYS_RESTORE_SYSTEM_TIME_WITH_SOURCE}" ]; then
		INFO "time synchronization with RTC is NOT IMPLEMENTED yet!!"
	fi
}


function network_wait {
	local NETWORK_WAIT_TIME=$(call_func "yac_hook" "get_network_wait_time" "${WIRELESS_CONNECTED}" "${WIRELESS_CONNECTIVITY}")
	INFO "network_wait: get_network_wait_time => ${NETWORK_WAIT_TIME}"
	[ "0" == "${NETWORK_WAIT_TIME}" ] && return
	[ "" == "${NETWORK_WAIT_TIME}" ] && return
	INFO "network_wait: sleep for $(LIGHT_GREEN ${NETWORK_WAIT_TIME}) seconds"
	sleep ${NETWORK_WAIT_TIME}
}


function run_init_scripts {
	local SCRIPTS=($(find ${PROFILE_CURRENT_DIR}/etc/init.d/ -type f | sort))
	for s in "${SCRIPTS[@]}"; do
		INFO "executing $(LIGHT_GREEN ${BOARD_PROFILE}) / $(BLUE ${BOARD_PROFILE_VERSION}) / $(PURPLE $(basename $s)) ..."
		notify_event "init" "$s" "begin"
		PROFILE_CURRENT_DIR=${PROFILE_CURRENT_DIR} \
			PROFILE_LOG_DIR=${PROFILE_LOG_DIR} \
			IGNORE_NODE_MODUEL_CHECKING=true \
			$s
		notify_event "init" "$s" "end"
	done
}

function notify_event {
	call_board_hook boot $@
	call_profile_hook boot $@
}

function yac_main {
	source ${YAC_DIR}/externals/bash-utils/system

	# Mount all necessary directories from partitions other
	# than boot partition.
	#
	INFO "mount_directories"
	mount_directories

	# Merge system configurations (/opt/yapps-scripts/file/system.conf)
	# and profile system configurations (${PROFILE_CURRENT_DIR}/etc/system.conf)
	# to produce configuration /tmp/yapps.conf.sh, and then load it.
	#
	INFO "load_configurations"
	CONF_VERBOSE=true load_configurations

	# Mount all hook functions for boot process from following 2 sources:
	#
	# Board Hook
	#	- filepath: `/opt/ys/etc/.yac`
	#	- function: yac_board_hook()
	#
	# Profile Hook
	#	- filepath: `/mnt/app/profiles/[PROFILE]/current/etc/.yac`
	#	- function: yac_hook()
	#
	INFO "load_hooks"
	load_hooks

	# Generate all required identities.
	#
	notify_event "begin"
	INFO "update_system_id"
	update_system_id
	notify_event "update_system_id" ${BOARD_UNIQUE_ID}

	# Startup the timestamp daemon, and increase the number of
	# booting times for the node.
	#
	notify_event "run_timestamp_daemon"
	run_timestamp_daemon

	# Generate `/tmp/ttt_system` information file.
	#
	INFO "generate_system_info"
	notify_event "generate_system_info"
	generate_system_info

	# Initialize network interfaces.
	#
	INFO initialize_network
	source "${YAC_LIB_DIR}/networking"
	initialize_network || (ifconfig eth0 up; dhclient eth0; ifconfig -a)

	#if [ "true" != "${YAC_BOOT_IGNORE_WIRELESS_NETWORK_CONNECT}" ]; then
		# Setup wifi connection.
		#
	#	INFO "bootup_wireless_adapter"
	#	notify_event "bootup_wireless_adapter"
	#	bootup_wireless_adapter
	#	find_ap_and_connect
	#	notify_event "wireless" "${WIRELESS_CONNECTED}" "${WIRELESS_CONNECTIVITY}"
	#	network_wait
	#fi

	if [ "true" != "${YAC_BOOT_IGNORE_SEND_SYSINFO_TO_CLOUD}" ]; then
		# Notify cloud (tic-dm)
		#
		INFO "send_system_info_to_cloud"
		notify_event "send_system_info_to_cloud"
		send_system_info_to_cloud
	fi

	if [ "true" != "${YAC_BOOT_IGNORE_NTP}" ]; then
		# Synchronize with NTP time
		#
		INFO "synchronize_time"
		notify_event "synchronize_time"
		synchronize_time
	fi

	if [ "true" != "${YAC_BOOT_IGNORE_LOAD_CRONTAB_TASKS}" ]; then
		# Load all crontab tasks from these 3 sources:
		#	- ${YAC_DIR}/files/etc/cron.d/*
		#	- ${YS_DIR}/etc/cron.d/*
		#	- ${PROFILE_CURRENT_DIR}/etc/cron.d/*
		#
		INFO "load_crontab_tasks"
		load_crontab_tasks
	fi

	if [ "true" != "${YAC_BOOT_IGNORE_PROFILE_INIT_SCRIPTS}" ]; then
		# Run all scripts in /mnt/app/profiles/[PROFILE]/etc/init.d
		# for the profile.
		#
		INFO "run_init_scripts"
		run_init_scripts
	fi

	notify_event "end"
	INFO "yac_boot.end()"
}

