#!/bin/bash
#
##DOC:	upgrade profile archive to latest version


function get_profile_archive_list {
	local OUTPUT=$1
	local TMP=$(mktemp /tmp/XXXXXX)
	http \
		-a ${CLOUD_RELEASE_USER}:${CLOUD_RELEASE_PASS} \
		--check-status \
		--ignore-stdin \
		${CLOUD_RELEASE_URL}/yapps/profiles/${BOARD_PROFILE}/0.${PROFILE_ENV}/ \
		board_unique_id==${BOARD_UNIQUE_ID} \
		board_serial_number==${BOARD_SERIAL_NUMBER} \
		> ${TMP} 2>&1
	if [ "0" == "$?" ]; then
		cat ${TMP} | jq -r '.[] | .name' | grep -v "^0\." | sort > ${OUTPUT}
	else
		touch ${OUTPUT}
		cat ${TMP}
	fi
	rm -f ${TMP}
}

function download_and_extract {
	local PROFILE_ENV=$1
	local PROFILE_VERSION=$2
	local ARCHIVES=$(mktemp /tmp/XXXXXX)
	INFO "checking latest version for $(LIGHT_GREEN ${PROFILE_ENV})..."
	PROFILE_ENV=${PROFILE_ENV} get_profile_archive_list ${ARCHIVES}
	[ "0" == "$(cat ${ARCHIVES} | wc -l | sed 's/\ //g')" ] && INFO "no archives for $(LIGHT_GREEN ${BOARD_PROFILE}) to download" && rm -f ${ARCHIVES} && exit 1

	if [ "" == "${PROFILE_VERSION}" ]; then
		local ARCHIVE=$(cat ${ARCHIVES} | tail -n1)
	else
		if [ "" == "$(cat ${ARCHIVES} | grep ${PROFILE_VERSION}.tar)" ]; then
			INFO "no such version $(LIGHT_GREEN ${PROFILE_VERSION}) on server to download, please select one of following versions:"
			cat ${ARCHIVES} | awk -F'.' '{printf "\t%s\n", $1}'
			rm -f ${ARCHIVES}
			exit 1
		fi
		local ARCHIVE="$(cat ${ARCHIVES} | grep ${PROFILE_VERSION}.tar)"
	fi

	local ARCHIVE_NAME="${ARCHIVE%%.*}"
	local PROFILE_ARCHIVE_URL="${CLOUD_RELEASE_URL}/yapps/profiles/${BOARD_PROFILE}/0.${PROFILE_ENV}/${ARCHIVE}"
	local BOARD_PROFILE_VERSION=$(mount | grep "/${BOARD_PROFILE}/current" | awk '{print $1}' | awk -F'/' '{print $6}')
	[ "${ARCHIVE_NAME}" == "${BOARD_PROFILE_VERSION}" ] && ERR "the target profile archive equals to currently-running version: $(YELLOW ${ARCHIVE_NAME})" && exit 2

	INFO "downloading latest version $(LIGHT_GREEN ${PROFILE_ARCHIVE_URL})"
	ARCHIVE_FILE="/tmp/${BOARD_PROFILE}-$(basename ${PROFILE_ARCHIVE_URL})"
	http \
		--check-status \
		--ignore-stdin \
		-a ${CLOUD_RELEASE_USER}:${CLOUD_RELEASE_PASS} \
		${PROFILE_ARCHIVE_URL} \
		board_unique_id==${BOARD_UNIQUE_ID} \
		board_serial_number==${BOARD_SERIAL_NUMBER} \
		> ${ARCHIVE_FILE}

	if [ "0" != "$?" ]; then
		ERR "failed to download ${PROFILE_ARCHIVE_URL}"
		exit 3
	fi
	INFO "successfully download $(basename ${ARCHIVE_FILE})"
	TARGET_DIR="/mnt/app/profiles/${BOARD_PROFILE}/${ARCHIVE_NAME}"
	[ -d "${TARGET_DIR}/apps" ] && INFO "$(RED ${TARGET_DIR}) already exists. Going to overwrite it" && rm -rf ${TARGET_DIR}
	mkdir -p ${TARGET_DIR}
	RUN_CMD tar xvf ${ARCHIVE_FILE} -C ${TARGET_DIR}
	rm -f ${ARCHIVE_FILE}
	rm -f ${ARCHIVES}
	INFO "update /mnt/app/profiles/${BOARD_PROFILE}/entry with $(YELLOW ${ARCHIVE_NAME})"
	echo "${ARCHIVE_NAME}" > /mnt/app/profiles/${BOARD_PROFILE}/entry
	INFO "switch /mnt/app/profiles/${BOARD_PROFILE}/env to $(YELLOW ${PROFILE_ENV})"
	echo "${PROFILE_ENV}" > /mnt/app/profiles/${BOARD_PROFILE}/env

	local MODULE_CONF="/mnt/app/profiles/${BOARD_PROFILE}/${ARCHIVE_NAME}/apps/packages.conf"
	local MODULE_DIR="/mnt/app/profiles/${BOARD_PROFILE}/${ARCHIVE_NAME}/runtimes/nodejs/${NODEJS_VERSION}"
	source "$(dirname $0)/../externals/bash-utils/system"
	initiate_linux_os_variables
	if download_nodejs_modules \
		${NODEJS_VERSION} \
		${OS_NAME} \
		${OS_ARCH} \
		${MODULE_DIR} \
		${MODULE_CONF} \
		${CLOUD_ARCHIVE_URL} ; then
		INFO "successfully install nodejs module"
	else
		local MODULES=$(cat ${MODULE_CONF} | tr '\t' '@' | tr '\n' ' ')
		local CURRENT=$(pwd)
		local CMD="${RUNTIME_NODEJS_DIR}/bin/node ${RUNTIME_NODEJS_DIR}/bin/npm install ${MODULES}"
		cd ${MODULE_DIR} && INFO "install command: $(YELLOW ${CMD})" && ${CMD}
		cd ${CURRENT}
	fi
}

function yac_main {
	local PROFILE_VERSION=${VERSION}
	local PROFILE_ENV="development"
	[ "" == "${ENV}" ] || PROFILE_ENV=${ENV}

	case "${PROFILE_ENV}" in
		development|testing|production)
			;;
		*)
			ERR "unexpected environment: ${ENV}"
			exit 1
			;;
	esac

	export BOARD_UNIQUE_ID=$(cat /tmp/ttt_system | grep "^id" | awk '{print $2}')
	export BOARD_SERIAL_NUMBER=$(cat /tmp/ttt_system | grep "^sn" | awk '{print $2}')
	[ "" == "${BOARD_UNIQUE_ID}" ] && BOARD_UNIQUE_ID="unknown"
	[ "" == "${BOARD_SERIAL_NUMBER}" ] && BOARD_SERIAL_NUMBER="unknown"

	download_and_extract ${PROFILE_ENV} ${PROFILE_VERSION}
}
