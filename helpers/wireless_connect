#!/bin/bash

function connect_to_ap {
	set -e
	[ "" == "$1" ] && ERR "ERR: please specify ssid ..." && return
	[ "" == "$2" ] && ERR "ERR: please specify password ... " && return

	INFO "${WIRELESS_IF} clean-up previous instance ..."
	ps aux | grep wpa_supplicant | grep ${WIRELESS_IF} | awk '{print $2}' | xargs -I{} sh -c "kill -9 {}"
	ps aux | grep dhclient | grep ${WIRELESS_IF} | awk '{print $2}' | xargs -I{} sh -c "kill -9 {}"

	SSID=$1
	PASS=$2

	INFO "${WIRELESS_IF} connecting to $(BLUE ${SSID}) ..."

	[ "" == "${WIFI_LOGFILE}" ] && WIFI_LOGFILE="/tmp/wireless-`date +%Y%m%d%H%M%S`-$1.log"

	wpa_passphrase ${SSID} ${PASS} > /tmp/wireless_setting
	wpa_supplicant -dd -t -Dwext -i ${WIRELESS_IF} -c/tmp/wireless_setting -f${WIFI_LOGFILE} -B > /dev/null 2>&1

	times=0

	while [ "" != "$(iwconfig ${WIRELESS_IF} | head -n1 | grep 'unassociated')" ]
	do
		sleep 1
		times=$(($times+1))
		if [ "$times" -gt 20 ];
		then
			INFO "${WIRELESS_IF} handshake timeout, more than 20 seconds, return 1"
			return 1
		fi
		INFO "${WIRELESS_IF} waiting for wifi handshake with SSID $(BLUE ${SSID}) ..."
	done

	while [ "" == "$(ifconfig ${WIRELESS_IF} | grep 'BROADCAST' | grep 'RUNNING')" ]
	do
		sleep 1
		times=$(($times+1))
		if [ "$times" -gt 20 ];
		then
			INFO "${WIRELESS_IF} authentication timeout, more than 20 seconds, return 2"
			return 2
		fi
		INFO "${WIRELESS_IF} waiting for wifi authentication with SSID $(BLUE ${SSID}) ..."
	done

	[ "" == "${WAITING_TIME_LOGFILE}" ] || echo $times > ${WAITING_TIME_LOGFILE}

	INFO "${WIRELESS_IF} renew dhcp settings ..."
	dhclient ${WIRELESS_IF}

	INFO "${WIRELESS_IF} restart bonjour service ..."
	service avahi-daemon restart > /dev/null 2>&1
	return 0
}


function connect_to_ap_with_conf {
	set -e
	local CONFIG=$1
	[ "" == "${CONFIG}" ] && ERR "ERR: please specify wpa config file ..." && return
	[ ! -f "${CONFIG}" ] && ERR "ERR: missing wpa config file: ${CONFIG} ..." && return

	INFO "${WIRELESS_IF} clean-up previous instance ..."
	ps aux | grep wpa_supplicant | grep ${WIRELESS_IF} | awk '{print $2}' | xargs -I{} sh -c "kill -9 {}"
	ps aux | grep dhclient | grep ${WIRELESS_IF} | awk '{print $2}' | xargs -I{} sh -c "kill -9 {}"

	INFO "${WIRELESS_IF} connecting to wireless router with config $(BLUE ${CONFIG}):"
	cat ${CONFIG}

	[ "" == "${WIFI_LOGFILE}" ] && WIFI_LOGFILE="/tmp/wireless-`date +%Y%m%d%H%M%S`-$(basename $1).log"

	local DRIVER="$(cat ${CONFIG} | grep "^##DRIVER" | head -n1 | awk -F':' '{print $2}' | sed 's/\ //g')"
	local AUTH_TIMEOUT="$(cat ${CONFIG} | grep "^##AUTH_TIMEOUT" | head -n1 | awk -F':' '{print $2}' | sed 's/\ //g')"
	[ "" == "${DRIVER}" ] && DRIVER="wext"
	[ "" == "${AUTH_TIMEOUT}" ] && AUTH_TIMEOUT="20"
	INFO "DRIVER       => $(YELLOW ${DRIVER})"
	INFO "AUTH_TIMEOUT => $(YELLOW ${AUTH_TIMEOUT})"

	local COMMAND="wpa_supplicant -dd -t -D${DRIVER} -i ${WIRELESS_IF} -c${CONFIG} -f${WIFI_LOGFILE} -B"
	INFO "$(LIGHT_GREEN ${COMMAND})"
	${COMMAND} > /dev/null 2>&1
	# wpa_supplicant -dd -t -D${DRIVER} -i ${WIRELESS_IF} -c${CONFIG} -f${WIFI_LOGFILE} -B > /dev/null 2>&1

	times=0

	while [ "" != "$(iwconfig ${WIRELESS_IF} | head -n1 | grep 'unassociated')" ]
	do
		sleep 1
		times=$(($times+1))
		if [ "$times" -gt "${AUTH_TIMEOUT}" ];
		then
			INFO "${WIRELESS_IF} handshake timeout, more than 20 seconds, return 1"
			return 1
		fi
		INFO "${WIRELESS_IF} waiting for wifi handshake with WPA-CONF: $(BLUE ${CONFIG}) ... (${times}/${AUTH_TIMEOUT})"
	done

	while [ "" == "$(ifconfig ${WIRELESS_IF} | grep 'BROADCAST' | grep 'RUNNING')" ]
	do
		sleep 1
		times=$(($times+1))
		if [ "$times" -gt "${AUTH_TIMEOUT}" ];
		then
			INFO "${WIRELESS_IF} authentication timeout, more than 20 seconds, return 2"
			return 2
		fi
		INFO "${WIRELESS_IF} waiting for wifi authentication with WPA-CONF: $(BLUE ${CONFIG}) ...(${times}/${AUTH_TIMEOUT})"
	done

	[ "" == "${WAITING_TIME_LOGFILE}" ] || echo $times > ${WAITING_TIME_LOGFILE}

	INFO "${WIRELESS_IF} renew dhcp settings ..."
	local LEASE_FILE="/var/lib/dhcp/dhclient.${WIRELESS_IF}.leases"
	local PID_FILE="/run/dhclient.${WIRELESS_IF}.pid"
	rm -f ${LEASE_FILE}
	COMMAND="dhclient -pf ${PID_FILE} -lf ${LEASE_FILE} ${WIRELESS_IF}"
	INFO "$(LIGHT_GREEN ${COMMAND})"
	${COMMAND}

	INFO "${WIRELESS_IF} restart bonjour service ..."
	service avahi-daemon restart > /dev/null 2>&1
	return 0
}


function indicate_progress {
	stdbuf -oL echo -e "|\t0000\tdata\t$@"
}


function show_error {
	echo $@ >&2
}


function connect_to_ap_with_conf_programmable {
	local CONFIG=$1
	local TIMEOUT=$2
	[ "" == "${CONFIG}" ] && show_error "missing configuration file" && exit 10
	[ "" == "${TIMEOUT}" ] && TIMEOUT="20"

	local DRIVER="$(cat ${CONFIG} | grep "^##DRIVER" | head -n1 | awk -F':' '{print $2}' | sed 's/\ //g')"
	[ "" == "${DRIVER}" ] && DRIVER="wext"

	indicate_progress "cleanup"
	ps aux | grep wpa_supplicant | grep ${WIRELESS_IF} | awk '{print $2}' | xargs -I{} sh -c "kill -9 {}"
	while [ "" != "$(ps aux | grep wpa_supplicant | grep ${WIRELESS_IF})" ]; do
		sleep 1
		indicate_progress "wait_wpa_down"
	done
	ps aux | grep dhclient | grep ${WIRELESS_IF} | awk '{print $2}' | xargs -I{} sh -c "kill -9 {}"
	while [ "" != "$(ps aux | grep dhclient | grep ${WIRELESS_IF})" ]; do
		sleep 1
		indicate_progress "wait_dhcp_down"
	done

	indicate_progress "gen_secret"
	nice -n -5 wpa_supplicant -t -dd -D${DRIVER} -i ${WIRELESS_IF} -c${CONFIG} -f/tmp/wireless.log -B > /dev/null 2>&1

	local TIMES=0
	while [ "" != "$(iwconfig ${WIRELESS_IF} | head -n1 | grep 'unassociated')" ]; do
		sleep 1
		TIMES=$(($TIMES+1))
		if [ "${TIMES}" -gt ${TIMEOUT} ]; then
			show_err "handshake timeout, more than ${TIMEOUT} seconds"
			exit 12
		fi
		indicate_progress "handshake:${TIMES}"
	done

	while [ "" == "$(ifconfig ${WIRELESS_IF} | grep 'BROADCAST' | grep 'RUNNING')" ]; do
		sleep 1
		TIMES=$(($TIMES+1))
		if [ "${TIMES}" -gt ${TIMEOUT} ]; then
			show_err "authentication timeout, more than ${TIMEOUT} seconds"
			exit 13
		fi
		indicate_progress "auth:${TIMES}"
	done

	indicate_progress "renew_dhcp"
	local LEASE_FILE="/var/lib/dhcp/dhclient.${WIRELESS_IF}.leases"
	local PID_FILE="/run/dhclient.${WIRELESS_IF}.pid"
	rm -f ${LEASE_FILE}
	dhclient -pf ${PID_FILE} -lf ${LEASE_FILE} ${WIRELESS_IF}

	local IP_ADDR=$(ifconfig ${WIRELESS_IF} | grep "inet addr" | awk '{print $2}' | sed 's/addr://g')
	indicate_progress "done:${IP_ADDR}"
	return 0
}
